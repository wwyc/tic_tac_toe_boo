{"ast":null,"code":"'use strict'; // tar -c\n\nconst hlo = require('./high-level-opt.js');\n\nconst Pack = require('./pack.js');\n\nconst fs = require('fs');\n\nconst fsm = require('fs-minipass');\n\nconst t = require('./list.js');\n\nconst path = require('path');\n\nconst c = module.exports = (opt_, files, cb) => {\n  if (typeof files === 'function') cb = files;\n  if (Array.isArray(opt_)) files = opt_, opt_ = {};\n  if (!files || !Array.isArray(files) || !files.length) throw new TypeError('no files or directories specified');\n  files = Array.from(files);\n  const opt = hlo(opt_);\n  if (opt.sync && typeof cb === 'function') throw new TypeError('callback not supported for sync tar functions');\n  if (!opt.file && typeof cb === 'function') throw new TypeError('callback only supported with file option');\n  return opt.file && opt.sync ? createFileSync(opt, files) : opt.file ? createFile(opt, files, cb) : opt.sync ? createSync(opt, files) : create(opt, files);\n};\n\nconst createFileSync = (opt, files) => {\n  const p = new Pack.Sync(opt);\n  const stream = new fsm.WriteStreamSync(opt.file, {\n    mode: opt.mode || 0o666\n  });\n  p.pipe(stream);\n  addFilesSync(p, files);\n};\n\nconst createFile = (opt, files, cb) => {\n  const p = new Pack(opt);\n  const stream = new fsm.WriteStream(opt.file, {\n    mode: opt.mode || 0o666\n  });\n  p.pipe(stream);\n  const promise = new Promise((res, rej) => {\n    stream.on('error', rej);\n    stream.on('close', res);\n    p.on('error', rej);\n  });\n  addFilesAsync(p, files);\n  return cb ? promise.then(cb, cb) : promise;\n};\n\nconst addFilesSync = (p, files) => {\n  files.forEach(file => {\n    if (file.charAt(0) === '@') t({\n      file: path.resolve(p.cwd, file.substr(1)),\n      sync: true,\n      noResume: true,\n      onentry: entry => p.add(entry)\n    });else p.add(file);\n  });\n  p.end();\n};\n\nconst addFilesAsync = (p, files) => {\n  while (files.length) {\n    const file = files.shift();\n    if (file.charAt(0) === '@') return t({\n      file: path.resolve(p.cwd, file.substr(1)),\n      noResume: true,\n      onentry: entry => p.add(entry)\n    }).then(_ => addFilesAsync(p, files));else p.add(file);\n  }\n\n  p.end();\n};\n\nconst createSync = (opt, files) => {\n  const p = new Pack.Sync(opt);\n  addFilesSync(p, files);\n  return p;\n};\n\nconst create = (opt, files) => {\n  const p = new Pack(opt);\n  addFilesAsync(p, files);\n  return p;\n};","map":null,"metadata":{},"sourceType":"script"}