{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\wchan\\\\Desktop\\\\Personal Projects\\\\tic-tac-toe-HomeWork\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\wchan\\\\Desktop\\\\Personal Projects\\\\tic-tac-toe-HomeWork\\\\src\\\\components\\\\Game.js\";\nimport React, { Component } from 'react';\nimport Board from './Board'; // import ScoresRepository from '../scores';\n// import AppDAO from '../dao';\n\nexport default class Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      xIsNext: true,\n      stepNumber: 0,\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      scores: {\n        X: 0,\n        O: 0\n      },\n      winner: {\n        player: null,\n        line: null\n      }\n    };\n\n    const Promise = require('bluebird');\n\n    const ScoresRepository = require('../scores');\n\n    const AppDAO = require('../dao');\n\n    require('aws-sdk/dist/aws-sdk');\n\n    var AWS = window.AWS;\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0,\n      winner: {\n        player: null,\n        line: null\n      }\n    });\n  }\n\n  updateScore(winner, winningline) {\n    const score_history = this.state.scores;\n    let x_scores = score_history['X'];\n    let y_scores = score_history['O'];\n\n    if (winner === 'X') {\n      x_scores = score_history['X'] + 1;\n    } else {\n      y_scores = score_history['O'] + 1;\n    }\n\n    this.setState({\n      scores: {\n        X: x_scores,\n        O: y_scores\n      },\n      winner: {\n        player: winner,\n        line: winningline\n      }\n    });\n  }\n\n  checkForWinner(squares) {\n    // Possible winning combinations\n    const possibleCombinations = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]; // Iterate every combination to see if there is a match\n\n    for (let i = 0; i < possibleCombinations.length; i += 1) {\n      const _possibleCombinations = _slicedToArray(possibleCombinations[i], 3),\n            a = _possibleCombinations[0],\n            b = _possibleCombinations[1],\n            c = _possibleCombinations[2];\n\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        this.updateScore(squares[a], [a, b, c]);\n        return {\n          player: squares[a],\n          line: [a, b, c]\n        };\n      }\n    }\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    const winner = this.state.winner;\n\n    if (winner.player || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat({\n        squares: squares\n      }),\n      xIsNext: !this.state.xIsNext,\n      stepNumber: history.length\n    });\n    this.checkForWinner(squares);\n  }\n\n  resetScore() {\n    this.setState({\n      scores: {\n        X: 0,\n        O: 0\n      }\n    });\n  }\n\n  resetGame() {\n    this.setState({\n      xIsNext: true,\n      stepNumber: 0,\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      winner: {\n        player: null,\n        line: null\n      }\n    });\n  }\n\n  render() {\n    const score_history = this.state.scores;\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = this.state.winner;\n    const moves = history.map((step, move) => {\n      const desc = 'Go to move #' + move;\n\n      if (move) {\n        return React.createElement(\"li\", {\n          key: move,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          onClick: () => {\n            this.jumpTo(move);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }, desc));\n      }\n    });\n    let status;\n\n    if (winner.player) {\n      status = \"Winner: \" + winner.player; //+ \" @ \" + winner.line;\n    } else if (!current.squares.includes(null)) {\n      status = \"Tie Game!\";\n    } else {\n      status = 'Next Player is ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    let scores;\n    scores = \"SCORES  - Player X: \" + score_history['X'] + \"pts,   \" + \"Player O: \" + score_history['O'] + 'pts';\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"start\",\n      onClick: () => this.resetGame(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \" Start The Game\"), React.createElement(\"div\", {\n      className: \"game-scores\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, scores)), React.createElement(\"button\", {\n      disabled: !this.state.winner,\n      onClick: () => this.resetScore(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \" Reset Scores\"), React.createElement(\"div\", {\n      className: \"game-status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, status)), React.createElement(\"div\", {\n      className: \"game-board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(Board, {\n      winningSquares: winner.player ? winner.line : [],\n      squares: current.squares,\n      onClick: i => this.handleClick(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"game-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"Move History Below: Click to jump to previous moves in current Game\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, moves)));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/wchan/Desktop/Personal Projects/tic-tac-toe-HomeWork/src/components/Game.js"],"names":["React","Component","Board","Game","constructor","props","state","xIsNext","stepNumber","history","squares","Array","fill","scores","X","O","winner","player","line","Promise","require","ScoresRepository","AppDAO","AWS","window","jumpTo","step","setState","updateScore","winningline","score_history","x_scores","y_scores","checkForWinner","possibleCombinations","i","length","a","b","c","handleClick","slice","current","concat","resetScore","resetGame","render","moves","map","move","desc","status","includes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Board from './Board';\r\n// import ScoresRepository from '../scores';\r\n// import AppDAO from '../dao';\r\n\r\nexport default class Game extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            xIsNext: true,\r\n            stepNumber: 0,\r\n            history: [\r\n                { squares: Array(9).fill(null) }\r\n            ],\r\n            scores: {X:0, O:0},\r\n            winner: {player: null, line: null}\r\n        }\r\n\r\n        const Promise = require('bluebird')\r\n        const ScoresRepository = require('../scores')\r\n        const AppDAO = require('../dao')\r\n        require('aws-sdk/dist/aws-sdk');\r\n        var AWS = window.AWS;\r\n    }\r\n\r\n    jumpTo(step){\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step%2)===0,\r\n            winner: {player: null, line: null}\r\n        })\r\n    }\r\n\r\n    updateScore(winner, winningline){\r\n      const score_history = this.state.scores\r\n\r\n      let x_scores = score_history['X']\r\n      let y_scores = score_history['O']\r\n\r\n       if (winner === 'X'){\r\n        x_scores = score_history['X'] + 1\r\n       } else {\r\n        y_scores = score_history['O'] + 1\r\n       }\r\n\r\n       this.setState({\r\n            scores: {X: x_scores, O:y_scores},\r\n            winner: {player: winner, line: winningline}\r\n         });\r\n    }\r\n\r\n    checkForWinner(squares){\r\n      // Possible winning combinations\r\n      const possibleCombinations = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n      ];\r\n\r\n      // Iterate every combination to see if there is a match\r\n      for (let i = 0; i < possibleCombinations.length; i += 1) {\r\n        const [a, b, c] = possibleCombinations[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n          this.updateScore(squares[a], [a, b, c]);\r\n          return { player: squares[a], line: [a, b, c] };\r\n        }\r\n      }\r\n    };\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        const winner = this.state.winner\r\n        if (winner.player || squares[i]) {\r\n            return;\r\n        }\r\n\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            history: history.concat({\r\n                squares: squares\r\n            }),\r\n            xIsNext: !this.state.xIsNext,\r\n            stepNumber: history.length\r\n        });\r\n        this.checkForWinner(squares);\r\n    }\r\n\r\n    resetScore() {\r\n      this.setState({\r\n        scores: {X:0, O:0},\r\n      })\r\n    }\r\n\r\n    resetGame() {\r\n      this.setState({\r\n        xIsNext: true,\r\n        stepNumber: 0,\r\n        history: [\r\n            { squares: Array(9).fill(null) }\r\n        ],\r\n        winner: {player: null, line: null}\r\n      })\r\n    }\r\n\r\n    render() {\r\n        const score_history = this.state.scores;\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = this.state.winner;\r\n        const moves = history.map((step, move) => {\r\n            const desc = 'Go to move #' + move ;\r\n            if (move){\r\n              return (\r\n                  <li key={move}>\r\n                      <button onClick={() => { this.jumpTo(move) }}>\r\n                          {desc}\r\n                      </button>\r\n                  </li>\r\n              )\r\n            }\r\n        });\r\n        let status;\r\n        if (winner.player) {\r\n            status = \"Winner: \" + winner.player //+ \" @ \" + winner.line;\r\n        } else if (!current.squares.includes(null)) {\r\n            status = \"Tie Game!\";\r\n        } else {\r\n            status = 'Next Player is ' + (this.state.xIsNext ? 'X' : 'O');\r\n        }\r\n\r\n        let scores\r\n        scores = \"SCORES  - Player X: \" + score_history['X'] + \"pts,   \" + \"Player O: \" + score_history['O'] + 'pts'\r\n\r\n        return (\r\n            <div className=\"game\">\r\n            <button className=\"start\" onClick={() => this.resetGame()}> Start The Game</button >\r\n\r\n            <div className=\"game-scores\">\r\n                <div>{scores}</div>\r\n            </div>\r\n\r\n            <button disabled={!this.state.winner} onClick={() => this.resetScore()}> Reset Scores</button >\r\n\r\n            <div className=\"game-status\">\r\n                <div>{status}</div>\r\n            </div>\r\n\r\n                <div className=\"game-board\" >\r\n                    <Board winningSquares={winner.player ? winner.line : []}\r\n                      squares={current.squares}\r\n                      onClick={i => this.handleClick(i)}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                <div>Move History Below: Click to jump to previous moves in current Game</div>\r\n                    <ul>{moves}</ul>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}