{"ast":null,"code":"'use strict';\n\nconst Buffer = require('./buffer.js');\n\nconst Header = require('./header.js');\n\nconst path = require('path');\n\nclass Pax {\n  constructor(obj, global) {\n    this.atime = obj.atime || null;\n    this.charset = obj.charset || null;\n    this.comment = obj.comment || null;\n    this.ctime = obj.ctime || null;\n    this.gid = obj.gid || null;\n    this.gname = obj.gname || null;\n    this.linkpath = obj.linkpath || null;\n    this.mtime = obj.mtime || null;\n    this.path = obj.path || null;\n    this.size = obj.size || null;\n    this.uid = obj.uid || null;\n    this.uname = obj.uname || null;\n    this.dev = obj.dev || null;\n    this.ino = obj.ino || null;\n    this.nlink = obj.nlink || null;\n    this.global = global || false;\n  }\n\n  encode() {\n    const body = this.encodeBody();\n    if (body === '') return null;\n    const bodyLen = Buffer.byteLength(body); // round up to 512 bytes\n    // add 512 for header\n\n    const bufLen = 512 * Math.ceil(1 + bodyLen / 512);\n    const buf = Buffer.allocUnsafe(bufLen); // 0-fill the header section, it might not hit every field\n\n    for (let i = 0; i < 512; i++) {\n      buf[i] = 0;\n    }\n\n    new Header({\n      // XXX split the path\n      // then the path should be PaxHeader + basename, but less than 99,\n      // prepend with the dirname\n      path: ('PaxHeader/' + path.basename(this.path)).slice(0, 99),\n      mode: this.mode || 0o644,\n      uid: this.uid || null,\n      gid: this.gid || null,\n      size: bodyLen,\n      mtime: this.mtime || null,\n      type: this.global ? 'GlobalExtendedHeader' : 'ExtendedHeader',\n      linkpath: '',\n      uname: this.uname || '',\n      gname: this.gname || '',\n      devmaj: 0,\n      devmin: 0,\n      atime: this.atime || null,\n      ctime: this.ctime || null\n    }).encode(buf);\n    buf.write(body, 512, bodyLen, 'utf8'); // null pad after the body\n\n    for (let i = bodyLen + 512; i < buf.length; i++) {\n      buf[i] = 0;\n    }\n\n    return buf;\n  }\n\n  encodeBody() {\n    return this.encodeField('path') + this.encodeField('ctime') + this.encodeField('atime') + this.encodeField('dev') + this.encodeField('ino') + this.encodeField('nlink') + this.encodeField('charset') + this.encodeField('comment') + this.encodeField('gid') + this.encodeField('gname') + this.encodeField('linkpath') + this.encodeField('mtime') + this.encodeField('size') + this.encodeField('uid') + this.encodeField('uname');\n  }\n\n  encodeField(field) {\n    if (this[field] === null || this[field] === undefined) return '';\n    const v = this[field] instanceof Date ? this[field].getTime() / 1000 : this[field];\n    const s = ' ' + (field === 'dev' || field === 'ino' || field === 'nlink' ? 'SCHILY.' : '') + field + '=' + v + '\\n';\n    const byteLen = Buffer.byteLength(s); // the digits includes the length of the digits in ascii base-10\n    // so if it's 9 characters, then adding 1 for the 9 makes it 10\n    // which makes it 11 chars.\n\n    let digits = Math.floor(Math.log(byteLen) / Math.log(10)) + 1;\n    if (byteLen + digits >= Math.pow(10, digits)) digits += 1;\n    const len = digits + byteLen;\n    return len + s;\n  }\n\n}\n\nPax.parse = (string, ex, g) => new Pax(merge(parseKV(string), ex), g);\n\nconst merge = (a, b) => b ? Object.keys(a).reduce((s, k) => (s[k] = a[k], s), b) : a;\n\nconst parseKV = string => string.replace(/\\n$/, '').split('\\n').reduce(parseKVLine, Object.create(null));\n\nconst parseKVLine = (set, line) => {\n  const n = parseInt(line, 10); // XXX Values with \\n in them will fail this.\n  // Refactor to not be a naive line-by-line parse.\n\n  if (n !== Buffer.byteLength(line) + 1) return set;\n  line = line.substr((n + ' ').length);\n  const kv = line.split('=');\n  const k = kv.shift().replace(/^SCHILY\\.(dev|ino|nlink)/, '$1');\n  if (!k) return set;\n  const v = kv.join('=');\n  set[k] = /^([A-Z]+\\.)?([mac]|birth|creation)time$/.test(k) ? new Date(v * 1000) : /^[0-9]+$/.test(v) ? +v : v;\n  return set;\n};\n\nmodule.exports = Pax;","map":null,"metadata":{},"sourceType":"script"}