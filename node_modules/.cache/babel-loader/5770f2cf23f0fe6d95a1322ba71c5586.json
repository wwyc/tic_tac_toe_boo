{"ast":null,"code":"const sqlite3 = require('sqlite3').verbose();\n\nconst Promise = require('bluebird'); // var sqlite3 = require('sqlite3').verbose();\n// var db = new sqlite3.Database(':memory:');\n//\n// db.serialize(function() {\n//     db.run(\"CREATE TABLE IF NOT EXISTS score_history(player TEXT, score INT)\");\n//\n//     var stmt = db.prepare(\"INSERT INTO score_history(player, score) VALUES (?, ?)\");\n//     stmt.run(\"X \" , 0);\n//     stmt.run(\"O \" , 0);\n//     stmt.finalize();\n//\n//     db.each(\"SELECT * FROM score_history\", function(err, row) {\n//         console.log(row.player + \" \" + row.score );\n//     });\n// });\n//\n// db.close();\n\n\nclass AppDAO {\n  constructor() {\n    // this.db = new sqlite3.Database(dbFilePath, (err) => {\n    this.db = new sqlite3.Database(':memory:', err => {\n      if (err) {\n        console.log('Could not connect to database', err);\n      } else {\n        console.log('Connected to database');\n      }\n    });\n    this.db.run(\"CREATE TABLE IF NOT EXISTS score_history(player TEXT, score INT)\");\n    var stmt = this.db.prepare(\"INSERT INTO score_history(player, score) VALUES (?, ?)\");\n    stmt.run(\"X \", 0);\n    stmt.run(\"O \", 0);\n    stmt.finalize();\n  }\n\n  run(sql, params = []) {\n    return new Promise((resolve, reject) => {\n      this.db.run(sql, params, function (err) {\n        if (err) {\n          console.log('Error running sql ' + sql);\n          console.log(err);\n          reject(err);\n        } else {\n          resolve({\n            id: this.lastID\n          });\n        }\n      });\n    });\n  }\n\n  get(sql, params = []) {\n    return new Promise((resolve, reject) => {\n      this.db.get(sql, params, (err, result) => {\n        if (err) {\n          console.log('Error running sql: ' + sql);\n          console.log(err);\n          reject(err);\n        } else {\n          resolve(result);\n        }\n      });\n    });\n  }\n\n  all(sql, params = []) {\n    return new Promise((resolve, reject) => {\n      this.db.all(sql, params, (err, rows) => {\n        if (err) {\n          console.log('Error running sql: ' + sql);\n          console.log(err);\n          reject(err);\n        } else {\n          resolve(rows);\n        }\n      });\n    });\n  }\n\n}\n\nmodule.exports = AppDAO;","map":{"version":3,"sources":["C:/Users/wchan/Desktop/Personal Projects/tic-tac-toe-HomeWork/src/dao.js"],"names":["sqlite3","require","verbose","Promise","AppDAO","constructor","db","Database","err","console","log","run","stmt","prepare","finalize","sql","params","resolve","reject","id","lastID","get","result","all","rows","module","exports"],"mappings":"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","sourcesContent":["const sqlite3 = require('sqlite3').verbose()\r\nconst Promise = require('bluebird')\r\n\r\n\r\n// var sqlite3 = require('sqlite3').verbose();\r\n// var db = new sqlite3.Database(':memory:');\r\n//\r\n// db.serialize(function() {\r\n//     db.run(\"CREATE TABLE IF NOT EXISTS score_history(player TEXT, score INT)\");\r\n//\r\n//     var stmt = db.prepare(\"INSERT INTO score_history(player, score) VALUES (?, ?)\");\r\n//     stmt.run(\"X \" , 0);\r\n//     stmt.run(\"O \" , 0);\r\n//     stmt.finalize();\r\n//\r\n//     db.each(\"SELECT * FROM score_history\", function(err, row) {\r\n//         console.log(row.player + \" \" + row.score );\r\n//     });\r\n// });\r\n//\r\n// db.close();\r\n\r\n\r\nclass AppDAO {\r\n\r\n  constructor() {\r\n    // this.db = new sqlite3.Database(dbFilePath, (err) => {\r\n    this.db = new sqlite3.Database(':memory:', (err) => {\r\n      if (err) {\r\n        console.log('Could not connect to database', err)\r\n      } else {\r\n        console.log('Connected to database')\r\n      }\r\n    })\r\n\r\n    this.db.run(\"CREATE TABLE IF NOT EXISTS score_history(player TEXT, score INT)\");\r\n    var stmt = this.db.prepare(\"INSERT INTO score_history(player, score) VALUES (?, ?)\");\r\n    stmt.run(\"X \" , 0);\r\n    stmt.run(\"O \" , 0);\r\n    stmt.finalize();\r\n  }\r\n\r\n\r\n  run(sql, params = []) {\r\n  return new Promise((resolve, reject) => {\r\n    this.db.run(sql, params, function (err) {\r\n      if (err) {\r\n        console.log('Error running sql ' + sql)\r\n        console.log(err)\r\n        reject(err)\r\n      } else {\r\n        resolve({ id: this.lastID })\r\n      }\r\n    })\r\n  })\r\n}\r\n\r\n  get(sql, params = []) {\r\n    return new Promise((resolve, reject) => {\r\n      this.db.get(sql, params, (err, result) => {\r\n        if (err) {\r\n          console.log('Error running sql: ' + sql)\r\n          console.log(err)\r\n          reject(err)\r\n        } else {\r\n          resolve(result)\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  all(sql, params = []) {\r\n    return new Promise((resolve, reject) => {\r\n      this.db.all(sql, params, (err, rows) => {\r\n        if (err) {\r\n          console.log('Error running sql: ' + sql)\r\n          console.log(err)\r\n          reject(err)\r\n        } else {\r\n          resolve(rows)\r\n        }\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\nmodule.exports = AppDAO\r\n"]},"metadata":{},"sourceType":"module"}