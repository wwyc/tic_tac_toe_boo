{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\wchan\\\\Desktop\\\\Personal Projects\\\\tic-tac-toe-HomeWork\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\wchan\\\\Desktop\\\\Personal Projects\\\\tic-tac-toe-HomeWork\\\\src\\\\components\\\\Game.js\";\nimport React, { Component } from 'react';\nimport Board from './Board';\nexport default class Game extends Component {\n  constructor(props) {\n    super(props);\n\n    this.checkForWinner = squares => {\n      // Possible winning combinations\n      const possibleCombinations = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]; // Iterate every combination to see if there is a match\n\n      for (let i = 0; i < possibleCombinations.length; i += 1) {\n        const _possibleCombinations = _slicedToArray(possibleCombinations[i], 3),\n              a = _possibleCombinations[0],\n              b = _possibleCombinations[1],\n              c = _possibleCombinations[2];\n\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n          this.updateScore(squares[a]);\n          return {\n            player: squares[a],\n            line: [a, b, c]\n          };\n        }\n      }\n\n      return null;\n    };\n\n    this.updateScore = winner => {// let pieces = {\n      // \t'X': this.state.xScore,\n      // \t'O': this.state.oScore\n      // }\n      //\n      // if(winner === 'X'){\n      // \tpieces['X'] += 1;\n      // \tthis.setState({\n      // \t\txScore: pieces['X']\n      // \t});\n      // }\n      // else{\n      // \tpieces['O'] += 1;\n      // \tthis.setState({\n      // \t\toScore: pieces['O']\n      // \t});\n      // }\n      // // End the game once there is a winner\n      // this.gameOver = true;\n      // this.newRound(winner);\n    };\n\n    this.state = {\n      xIsNext: true,\n      stepNumber: 0,\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      scores: {\n        X: 0,\n        O: 0\n      }\n    };\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n\n  updateScore(winner) {\n    const score_history = this.state.scores;\n    let x_scores = score_history['X'];\n    let y_scores = score_history['O'];\n\n    if (winner === 'X') {\n      x_scores = x_scores + 1;\n    } else {\n      y_scores = y_scores + 1;\n    }\n\n    this.setState({\n      scores: {\n        X: x_scores,\n        O: y_scores\n      }\n    });\n  }\n\n  handleClick(i) {\n    //const score_history = this.state.scores\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice(); //const winner = calculateWinner(squares);\n\n    const winner = checkForWinner(squares);\n\n    if (winner || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat({\n        squares: squares\n      }),\n      xIsNext: !this.state.xIsNext,\n      stepNumber: history.length\n    });\n    this.checkForWinner(squares);\n  }\n\n  render() {\n    const score_history = this.state.scores;\n    const history = this.state.history;\n    const current = history[this.state.stepNumber]; //const winner = calculateWinner(current.squares);\n\n    const winner = this.checkForWinner(current.squares);\n    const moves = history.map((step, move) => {\n      const desc = move ? 'Go to #' + move : 'Start the Game';\n      return React.createElement(\"li\", {\n        key: move,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: () => {\n          this.jumpTo(move);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, desc));\n    });\n    let status;\n\n    if (winner) {\n      //status = 'Winner is ' + winner + '!';\n      status = \"Winner: \" + winner.player + \" @ \" + winner.line;\n    } else if (!current.squares.includes(null)) {\n      status = \"Tie Game!\";\n    } else {\n      status = 'Next Player is ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    let scores;\n    scores = \"SCORES  - Player X: \" + score_history['X'] + \" wins,  \" + \"Player O: \" + score_history['O'] + 'wins';\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, scores), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, status)), React.createElement(\"div\", {\n      className: \"game-board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(Board, {\n      winningSquares: winner ? winner.line : [],\n      squares: current.squares,\n      onClick: i => this.handleClick(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"game-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, moves)));\n  }\n\n} // function calculateWinner(squares) {\n//     const lines = [\n//         [0, 1, 2],\n//         [3, 4, 5],\n//         [6, 7, 8],\n//         [0, 3, 6],\n//         [1, 4, 7],\n//         [2, 5, 8],\n//         [0, 4, 8],\n//         [2, 4, 6]\n//     ];\n//\n//     // for (let i = 0; i < lines.length; i++) {\n//     //     const [a, b, c] = lines[i];\n//     //     if (squares[a] && squares[a] === squares[b] && squares[b] === squares[c]) {\n//     //         return squares[a];\n//     //     }\n//     // }\n//\n//     for (let i = 0; i < lines.length; i++) {\n//         const [a, b, c] = lines[i];\n//         if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n//           return { player: squares[a], line: [a, b, c] };\n//         }\n//       }\n//\n//     return null;\n// }","map":{"version":3,"sources":["C:/Users/wchan/Desktop/Personal Projects/tic-tac-toe-HomeWork/src/components/Game.js"],"names":["React","Component","Board","Game","constructor","props","checkForWinner","squares","possibleCombinations","i","length","a","b","c","updateScore","player","line","winner","state","xIsNext","stepNumber","history","Array","fill","scores","X","O","jumpTo","step","setState","score_history","x_scores","y_scores","handleClick","slice","current","concat","render","moves","map","move","desc","status","includes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport Board from './Board';\r\n\r\nexport default class Game extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            xIsNext: true,\r\n            stepNumber: 0,\r\n            history: [\r\n                { squares: Array(9).fill(null) }\r\n            ],\r\n            scores: {X:0, O:0}\r\n        }\r\n    }\r\n\r\n    jumpTo(step){\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step%2)===0\r\n        })\r\n    }\r\n\r\n    updateScore(winner){\r\n         const score_history = this.state.scores\r\n\r\n          let x_scores = score_history['X']\r\n          let y_scores = score_history['O']\r\n\r\n          if (winner === 'X'){\r\n            x_scores = x_scores + 1\r\n          } else {\r\n            y_scores = y_scores + 1\r\n          }\r\n\r\n          this.setState({\r\n                scores: {X: x_scores, O:y_scores}\r\n            });\r\n      }\r\n\r\n      checkForWinner = (squares) => {\r\n        // Possible winning combinations\r\n        const possibleCombinations = [\r\n          [0, 1, 2],\r\n          [3, 4, 5],\r\n          [6, 7, 8],\r\n          [0, 3, 6],\r\n          [1, 4, 7],\r\n          [2, 5, 8],\r\n          [0, 4, 8],\r\n          [2, 4, 6],\r\n        ];\r\n\r\n        // Iterate every combination to see if there is a match\r\n        for (let i = 0; i < possibleCombinations.length; i += 1) {\r\n          const [a, b, c] = possibleCombinations[i];\r\n          if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            this.updateScore(squares[a]);\r\n            return { player: squares[a], line: [a, b, c] };\r\n          }\r\n        }\r\n        return null;\r\n      };\r\n\r\n    handleClick(i) {\r\n        //const score_history = this.state.scores\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        //const winner = calculateWinner(squares);\r\n        const winner = checkForWinner(squares);\r\n        if (winner || squares[i]) {\r\n            return;\r\n        }\r\n\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            history: history.concat({\r\n                squares: squares\r\n            }),\r\n            xIsNext: !this.state.xIsNext,\r\n            stepNumber: history.length\r\n        });\r\n        this.checkForWinner(squares);\r\n    }\r\n\r\n    updateScore = (winner) => {\r\n  \t\t// let pieces = {\r\n  \t\t// \t'X': this.state.xScore,\r\n  \t\t// \t'O': this.state.oScore\r\n  \t\t// }\r\n      //\r\n  \t\t// if(winner === 'X'){\r\n  \t\t// \tpieces['X'] += 1;\r\n  \t\t// \tthis.setState({\r\n  \t\t// \t\txScore: pieces['X']\r\n  \t\t// \t});\r\n  \t\t// }\r\n  \t\t// else{\r\n  \t\t// \tpieces['O'] += 1;\r\n  \t\t// \tthis.setState({\r\n  \t\t// \t\toScore: pieces['O']\r\n  \t\t// \t});\r\n  \t\t// }\r\n  \t\t// // End the game once there is a winner\r\n  \t\t// this.gameOver = true;\r\n  \t\t// this.newRound(winner);\r\n    }\r\n\r\n    render() {\r\n        const score_history = this.state.scores;\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        //const winner = calculateWinner(current.squares);\r\n        const winner = this.checkForWinner(current.squares);\r\n\r\n        const moves = history.map((step, move) => {\r\n            const desc = move ? 'Go to #' + move : 'Start the Game';\r\n            return (\r\n                <li key={move}>\r\n                    <button onClick={() => { this.jumpTo(move) }}>\r\n                        {desc}\r\n                    </button>\r\n                </li>\r\n            )\r\n        });\r\n        let status;\r\n        if (winner) {\r\n            //status = 'Winner is ' + winner + '!';\r\n            status = \"Winner: \" + winner.player + \" @ \" + winner.line;\r\n        } else if (!current.squares.includes(null)) {\r\n            status = \"Tie Game!\";\r\n        } else {\r\n            status = 'Next Player is ' + (this.state.xIsNext ? 'X' : 'O');\r\n        }\r\n\r\n        let scores\r\n        scores = \"SCORES  - Player X: \" + score_history['X'] + \" wins,  \" + \"Player O: \" + score_history['O'] + 'wins'\r\n\r\n        return (\r\n            <div className=\"game\">\r\n\r\n            <div className=\"game-status\">\r\n                <div>{scores}</div>\r\n                <div>{status}</div>\r\n            </div>\r\n\r\n                <div className=\"game-board\" >\r\n                    <Board winningSquares={winner ? winner.line : []}\r\n                      squares={current.squares}\r\n                      onClick={i => this.handleClick(i)}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <ul>{moves}</ul>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// function calculateWinner(squares) {\r\n//     const lines = [\r\n//         [0, 1, 2],\r\n//         [3, 4, 5],\r\n//         [6, 7, 8],\r\n//         [0, 3, 6],\r\n//         [1, 4, 7],\r\n//         [2, 5, 8],\r\n//         [0, 4, 8],\r\n//         [2, 4, 6]\r\n//     ];\r\n//\r\n//     // for (let i = 0; i < lines.length; i++) {\r\n//     //     const [a, b, c] = lines[i];\r\n//     //     if (squares[a] && squares[a] === squares[b] && squares[b] === squares[c]) {\r\n//     //         return squares[a];\r\n//     //     }\r\n//     // }\r\n//\r\n//     for (let i = 0; i < lines.length; i++) {\r\n//         const [a, b, c] = lines[i];\r\n//         if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n//           return { player: squares[a], line: [a, b, c] };\r\n//         }\r\n//       }\r\n//\r\n//     return null;\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}