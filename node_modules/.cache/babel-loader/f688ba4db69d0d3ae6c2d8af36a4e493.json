{"ast":null,"code":"'use strict'; // tar -x\n\nconst hlo = require('./high-level-opt.js');\n\nconst Unpack = require('./unpack.js');\n\nconst fs = require('fs');\n\nconst fsm = require('fs-minipass');\n\nconst path = require('path');\n\nconst x = module.exports = (opt_, files, cb) => {\n  if (typeof opt_ === 'function') cb = opt_, files = null, opt_ = {};else if (Array.isArray(opt_)) files = opt_, opt_ = {};\n  if (typeof files === 'function') cb = files, files = null;\n  if (!files) files = [];else files = Array.from(files);\n  const opt = hlo(opt_);\n  if (opt.sync && typeof cb === 'function') throw new TypeError('callback not supported for sync tar functions');\n  if (!opt.file && typeof cb === 'function') throw new TypeError('callback only supported with file option');\n  if (files.length) filesFilter(opt, files);\n  return opt.file && opt.sync ? extractFileSync(opt) : opt.file ? extractFile(opt, cb) : opt.sync ? extractSync(opt) : extract(opt);\n}; // construct a filter that limits the file entries listed\n// include child entries if a dir is included\n\n\nconst filesFilter = (opt, files) => {\n  const map = new Map(files.map(f => [f.replace(/\\/+$/, ''), true]));\n  const filter = opt.filter;\n\n  const mapHas = (file, r) => {\n    const root = r || path.parse(file).root || '.';\n    const ret = file === root ? false : map.has(file) ? map.get(file) : mapHas(path.dirname(file), root);\n    map.set(file, ret);\n    return ret;\n  };\n\n  opt.filter = filter ? (file, entry) => filter(file, entry) && mapHas(file.replace(/\\/+$/, '')) : file => mapHas(file.replace(/\\/+$/, ''));\n};\n\nconst extractFileSync = opt => {\n  const u = new Unpack.Sync(opt);\n  const file = opt.file;\n  let threw = true;\n  let fd;\n  const stat = fs.statSync(file); // This trades a zero-byte read() syscall for a stat\n  // However, it will usually result in less memory allocation\n\n  const readSize = opt.maxReadSize || 16 * 1024 * 1024;\n  const stream = new fsm.ReadStreamSync(file, {\n    readSize: readSize,\n    size: stat.size\n  });\n  stream.pipe(u);\n};\n\nconst extractFile = (opt, cb) => {\n  const u = new Unpack(opt);\n  const readSize = opt.maxReadSize || 16 * 1024 * 1024;\n  const file = opt.file;\n  const p = new Promise((resolve, reject) => {\n    u.on('error', reject);\n    u.on('close', resolve); // This trades a zero-byte read() syscall for a stat\n    // However, it will usually result in less memory allocation\n\n    fs.stat(file, (er, stat) => {\n      if (er) reject(er);else {\n        const stream = new fsm.ReadStream(file, {\n          readSize: readSize,\n          size: stat.size\n        });\n        stream.on('error', reject);\n        stream.pipe(u);\n      }\n    });\n  });\n  return cb ? p.then(cb, cb) : p;\n};\n\nconst extractSync = opt => {\n  return new Unpack.Sync(opt);\n};\n\nconst extract = opt => {\n  return new Unpack(opt);\n};","map":null,"metadata":{},"sourceType":"script"}