{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","isWinning","onClick","value","Board","i","this","winningSquares","includes","key","squares","renderSquare","Component","Game","state","xIsNext","stepNumber","history","Array","fill","scores","X","O","winner","player","line","gameHistory","setGameHistory","step","setState","winningline","scoreHistory","x_scores","y_scores","possibleCombinations","length","a","b","c","updateScore","slice","concat","checkForWinner","fetch","then","response","json","gameHistoryList","map","record","gameNumber","desc","status","current","moves","move","jumpTo","alert","resetGame","disabled","resetScore","handleClick","App","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.313e2aca.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Square(props) {\r\n    return (\r\n      <button\r\n        className={\"square \" + (props.isWinning ? \"square--winning\" : null)}\r\n        onClick={props.onClick}\r\n      >\r\n        {props.value}\r\n      </button>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\r\nimport Square from './Square';\r\n\r\nexport default class Board extends Component {\r\n  renderSquare(i) {\r\n      return (\r\n        <Square\r\n          isWinning={this.props.winningSquares.includes(i)}\r\n          key={\"square \" + i}\r\n          value={this.props.squares[i]}\r\n          onClick={() => this.props.onClick(i)}\r\n        />\r\n      );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"border-row\">\r\n                    {this.renderSquare(0)}\r\n                    {this.renderSquare(1)}\r\n                    {this.renderSquare(2)}\r\n                </div>\r\n                <div className=\"border-row\">\r\n                    {this.renderSquare(3)}\r\n                    {this.renderSquare(4)}\r\n                    {this.renderSquare(5)}\r\n                </div>\r\n                <div className=\"border-row\">\r\n                    {this.renderSquare(6)}\r\n                    {this.renderSquare(7)}\r\n                    {this.renderSquare(8)}\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Board from './Board';\r\n\r\nexport default class Game extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            xIsNext: true,\r\n            stepNumber: 0,\r\n            history: [\r\n                { squares: Array(9).fill(null) }\r\n            ],\r\n            scores: {X:0, O:0},\r\n            winner: {player: null, line: null},\r\n            gameHistory : null\r\n        }\r\n        this.setGameHistory();\r\n    }\r\n\r\n    jumpTo(step){\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step%2)===0,\r\n            winner: {player: null, line: null}\r\n        })\r\n    }\r\n\r\n    updateScore(winner, winningline){\r\n\r\n      const scoreHistory = this.state.scores\r\n\r\n      let x_scores = scoreHistory['X']\r\n      let y_scores = scoreHistory['O']\r\n\r\n       if (winner === 'X'){\r\n        x_scores = scoreHistory['X'] + 1\r\n       } else {\r\n        y_scores = scoreHistory['O'] + 1\r\n       }\r\n\r\n       this.setState({\r\n            scores: {X: x_scores, O:y_scores},\r\n            winner: {player: winner, line: winningline}\r\n         });\r\n    }\r\n\r\n    checkForWinner(squares){\r\n      // Possible winning combinations\r\n      const possibleCombinations = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n      ];\r\n\r\n      // Iterate every combination to see if there is a match\r\n      for (let i = 0; i < possibleCombinations.length; i += 1) {\r\n        const [a, b, c] = possibleCombinations[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n          this.updateScore(squares[a], [a, b, c]);\r\n          return { player: squares[a], line: [a, b, c] };\r\n        }\r\n      }\r\n\r\n      return null;\r\n    };\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        const winner = this.state.winner\r\n        if (winner.player || squares[i]) {\r\n            return;\r\n        }\r\n\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            history: history.concat({\r\n                squares: squares\r\n            }),\r\n            xIsNext: !this.state.xIsNext,\r\n            stepNumber: history.length\r\n        });\r\n        this.checkForWinner(squares);\r\n    }\r\n\r\n    resetScore() {\r\n      this.setState({\r\n        scores: {X:0, O:0},\r\n      })\r\n    }\r\n\r\n    resetGame() {\r\n      this.setState({\r\n        xIsNext: true,\r\n        stepNumber: 0,\r\n        history: [\r\n            { squares: Array(9).fill(null) }\r\n        ],\r\n        winner: {player: null, line: null}\r\n      })\r\n    }\r\n\r\n    setGameHistory() {\r\n      return fetch('http://localhost:8080')\r\n                    .then(response => response.json())\r\n                    .then(gameHistory => (this.setState({gameHistory: gameHistory})))\r\n    }\r\n\r\n    render() {\r\n        let gameHistory = this.state.gameHistory;\r\n        let gameHistoryList\r\n        if (gameHistory){\r\n          gameHistoryList = gameHistory.map((record, gameNumber) => {\r\n                gameNumber = gameNumber + 1\r\n                const desc = 'Player' + record['player'] + ' won game ' + record['gameNumber'];\r\n                return (\r\n                    <li key={desc}>\r\n                    {desc}\r\n                    </li>\r\n                )\r\n            })\r\n        }\r\n\r\n        const scoreHistory = this.state.scores;\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = this.state.winner;\r\n        const moves = history.map((step, move) => {\r\n            const desc = 'Go to move #' + move ;\r\n            if (move){\r\n              return (\r\n                  <li key={move}>\r\n                      <button onClick={() => { this.jumpTo(move) }}>\r\n                          {desc}\r\n                      </button>\r\n                  </li>\r\n              )\r\n            }\r\n            return null;\r\n        });\r\n        let status;\r\n        if (winner.player) {\r\n            status = \"Winner is \" + winner.player //+ \" @ \" + winner.line;\r\n        } else if (!current.squares.includes(null)) {\r\n            status = \"Tie Game!\";\r\n        } else {\r\n            status = 'Next Player is ' + (this.state.xIsNext ? 'X' : 'O');\r\n        }\r\n\r\n        if (status.includes(\"Winner\") || status.includes(\"Tie\")){\r\n          alert(status + '.  Please click th Start The Game button to start the next game.')\r\n        }\r\n\r\n        let scores\r\n        scores = \"SCORES  - Player X: \" + scoreHistory['X'] + \"pts,   \" + \"Player O: \" + scoreHistory['O'] + 'pts'\r\n\r\n        return (\r\n            <div className=\"game\">\r\n            <button className=\"start\" onClick={() => this.resetGame()}> Start The Game</button >\r\n\r\n            <div className=\"game-scores\">\r\n                <div>{scores}</div>\r\n            </div>\r\n\r\n            <button disabled={!this.state.winner} onClick={() => this.resetScore()}> Reset Scores</button >\r\n\r\n            <div className=\"game-status\">\r\n                <div>{status}</div>\r\n            </div>\r\n\r\n                <div className=\"game-board\" >\r\n                    <Board winningSquares={winner.player ? winner.line : []}\r\n                      squares={current.squares}\r\n                      onClick={i => this.handleClick(i)}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                <div>Move history will appear below when game begins. Click to jump to previous moves in current Game</div>\r\n                    <ul>{moves}</ul>\r\n                </div>\r\n\r\n                <div className=\"game-history\">\r\n                    <div>Game History: </div>\r\n                      //<ul>{gameHistoryList}</ul>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Game from './components/Game';\r\n//import endGame from './data/tic-tac-toe-end_game.json'\r\n\r\nfunction App() {\r\n  return (\r\n      <div className=\"App\">\r\n          <div id=\"head\">\r\n            Tic Tac Toe Game\r\n          </div>\r\n          <Game />\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}